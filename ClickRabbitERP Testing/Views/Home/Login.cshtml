@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    string returnUrl = ViewData["ReturnUrl"] as string;
    var error = TempData["Error"] as string;
}


@{
    Layout = null;
    //ViewBag["Title"] = "Login";

}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login / Signup</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" />

    <link rel="stylesheet" href="CSS/lg-css.css">
</head>

<body>
    <div class="form-structor">
        <div class="signup slide-up">
            <h2 class="form-title" id="signup"><span>or</span>Sign up</h2>
            <div class="form-holder">
                <input type="text" class="input" id="userID" placeholder="UserName" />
                <input type="email" class="input" id="userEmail" placeholder="Email" />
                <input type="password" class="input" id="userPass1" placeholder="Password" />
                <input type="password" class="input" id="userPass2" placeholder="Confirem Password" />
            </div>
            <button class="submit-btn" id="signupBtn">Sign up</button>
        </div>
        <div class="login ">
                <div class="center">
                    <h2 class="form-title" id="login"><span>or</span>Log in</h2>
            <form method="post" action="/login?ReturnUrl=@System.Net.WebUtility.UrlEncode(returnUrl)">
                    <div class="form-holder">
                        <input class="input" name="username" placeholder="UserName" />
                        <input type="password" class="input" id="password" name="password" placeholder="Password" />
                    </div>
                    <button class="submit-btn">Log in</button>
                </form>
                    @if (!string.IsNullOrEmpty(error))
                    {
                        <p class="card card-body alert-danger shadow">@error</p>
                    }
                </div>
        </div>
    </div>
    
</body>

</html>


<script>
    

    const loginBtn = document.getElementById('login');
    const signupBtn = document.getElementById('signup');
    const signUpValidationBtn = document.getElementById('signupBtn');

    signUpValidationBtn.addEventListener('click', (e) => {
        var pass1 = document.getElementById('userPass1');
        var pass2 = document.getElementById('userPass2');
        console.log(pass1.value, pass2.value);
        if (pass1.value === pass2.value) {
            console.log('Signup Sucsess!');
        }
        else {
            window.alert('password do not match!');
        }
    });
    console.clear();
    loginBtn.addEventListener('click', (e) => {
        let parent = e.target.parentNode.parentNode;
        Array.from(e.target.parentNode.parentNode.classList).find((element) => {
            if (element !== "slide-up") {
                parent.classList.add('slide-up')
            } else {
                signupBtn.parentNode.classList.add('slide-up')
                parent.classList.remove('slide-up')
            }
        });
    });

    signupBtn.addEventListener('click', (e) => {
        let parent = e.target.parentNode;
        Array.from(e.target.parentNode.classList).find((element) => {
            if (element !== "slide-up") {
                parent.classList.add('slide-up')
            } else {
                loginBtn.parentNode.parentNode.classList.add('slide-up')
                parent.classList.remove('slide-up')
            }
        });
    });
</script>